// This is the Dvorak-friendly layout for the Mitosis by CarVac (/u/CarVac)
// It features space on the left thumb, shift on the right thumb, a
//  number layer with all the numbers on the home row, and a function layer
//  that provides mouse keys among other things.

#include QMK_KEYBOARD_H

enum mitosis_layers
{
	_STD,
	_DOWN,
	_DOWN_SYMBOL,
	_DOWN_ALPHA,
	_UP,
	_ML
};


#define M_DOUBLE_CLICK M(0)
#define M_TRIPLE_CLICK M(1)
#define M_SHIFT_CLICK M(2)
#define M_CTRL_CLICK M(3)
#define M_SWITCH_WIN_START M(4)
#define M_SWITCH_MAC_START M(5)
#define M_SWITCH_WIN_P_START M(6)

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
  if (record->event.pressed) {
    switch (id) {
    case 0: return MACRO(T(BTN1), W(100), T(BTN1), END);
    case 1: return MACRO(T(BTN1), W(100), T(BTN1), W(100), T(BTN1), END);
    case 2: return MACRO(D(LSFT), W(50), T(BTN1), W(50), U(LSFT), END);
    case 3: return MACRO(D(LCTL), W(50), T(BTN1), W(50), U(LCTL), END);
    case 4: return MACRO(D(LALT), T(TAB), END);
    case 5: return MACRO(D(LGUI), T(TAB), END);
    case 6: return MACRO(D(LCTL), T(TAB), END);
    }
  }
  return MACRO_NONE;
};

//Mousekeys
/* #define MOUSEKEY_DELAY 300 */
/* #define MOUSEKEY_INTERNAL 50 */
/* #define MOUSEKEY_MAX_SPEED 20 */
/* #define MOUSEKEY_TIME_TO_MAX 30 */
/* #define MOUSEKEY_WHEEL_MAX_SPEED 8 */
/* #define MOUSEKEY_WHEEL_TIME_TO_MAX 40 */

// Fillers to make layering more clear
#define _______ KC_TRNS
#define XXXXXXX KC_NO

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

  /* QWERTY
   * .--------------------------------------------..--------------------------------------------.
   * | Q      | W      | E      | R      | T      || Y      | U      | I      | O      | P      |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * | A      | S      | D      | F      | G      || J      | H      | K      | L      | ;      |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * | Z      | X      | C      | V      | B      || N      | M      | ,      | .      | /      |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          | PGUP   | TAB    | LCTRL  | SPACE  || LSHIFT | ENTER  | UP     | PSCR   |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          | PGDN   | LGUI   | LALT   | FN     || NUM    | LEFT   | DOWN   | RIGHT  |
   *          '-----------------------------------''-----------------------------------'
   */
  [_STD] = LAYOUT(
    LT(_ML, KC_Q), KC_W,    KC_E,    KC_R,    KC_T,      KC_Y,      KC_U,    KC_I,    KC_O,    KC_P,
    KC_A, KC_S,    KC_D,    KC_F,    KC_G,      KC_H,      KC_J,    KC_K,    KC_L,    OSM(MOD_LCTL),
    OSM(MOD_LSFT), KC_X,    KC_C,    KC_V,    KC_B,      KC_N,      KC_M,    KC_COMM, KC_DOT, KC_ENT,  
	 KC_Z,  KC_LEAD,  KC_COLN,  KC_TAB,  KC_BSPC,  KC_SLSH,   KC_UP, OSM(MOD_LALT), 
	KC_ESC, KC_LGUI,  OSL(_UP), KC_SPC,   OSL(_DOWN), KC_LEFT, KC_DOWN, KC_RGHT
  ),

  /* Number layout, for data entry and programming purposes (Dvorak result in parens)
   * .--------------------------------------------..--------------------------------------------.
   * | TAB    |   (,<) |   (.>) | - ([{) | = (]}) || ] (=+) | pad *  | pad +  | pad -  | [ (/?) |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * | 1      | 2      | 3      | 4      | 5      || 6      | 7      | 8      | 9      | 0      |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * | F1     | F2     | F3     | F4     | F5     || F6     | F7     | F8     | F9     | F10    |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          | F11    | F12    |        |        ||        |        |        |        |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          |        |        |        |        ||        |        |        |        |
   *          '-----------------------------------''-----------------------------------'
   */
  [_DOWN] = LAYOUT(
    KC_EXLM, KC_AT,   KC_MINS, KC_PLUS,  KC_EQL,       KC_LPRN, KC_RPRN, KC_LBRC, KC_RBRC, KC_ASTR,
    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,          KC_6,    KC_7,    KC_8,    KC_9,    KC_TRNS,
    MO(_DOWN_SYMBOL),  KC_UNDS, KC_BSLS, KC_LCBR,   KC_RCBR,     KC_0,   KC_TILD,   _______, _______,   _______,
	    _______,  _______,  _______,  _______,       _______, _______, _______, _______,
	    _______, _______, MO(_DOWN_ALPHA), _______,          _______,  _______, _______, _______
  ),

  /* blank key layout template
   * .--------------------------------------------..--------------------------------------------.
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          |        |        |        |        ||        |        |        |        |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          |        |        |        |        ||        |        |        |        |
   *          '-----------------------------------''-----------------------------------'
   */
  [_DOWN_SYMBOL] = LAYOUT(
    _______,   _______, _______, _______, _______,   KC_DQT, _______,  _______,       _______, _______,
    _______,  _______, _______, KC_DLR, KC_CIRC,         KC_PIPE,   _______,  _______, _______, _______,
    _______,   KC_HASH,   KC_QUOT, KC_PERC, KC_AMPR,     KC_SCLN,   _______,  KC_LT,   KC_GT,   _______,
	    KC_GRV,  _______,  _______, _______,  _______,       KC_QUES, _______, _______,
             _______, _______, KC_NO, _______,          KC_NO,  _______, _______, _______
  ),

  /* QWERTY
   * .--------------------------------------------..--------------------------------------------.
   * | Q      | W      | E      | R      | T      || Y      | U      | I      | O      | P      |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * | A      | S      | D      | F      | G      || J      | H      | K      | L      | ;      |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * | Z      | X      | C      | V      | B      || N      | M      | ,      | .      | /      |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          | PGUP   | TAB    | LCTRL  | SPACE  || LSHIFT | ENTER  | UP     | PSCR   |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          | PGDN   | LGUI   | LALT   | FN     || NUM    | LEFT   | DOWN   | RIGHT  |
   *          '-----------------------------------''-----------------------------------'
   */
  [_DOWN_ALPHA] = LAYOUT(
    KC_Q, KC_W,    KC_E,    KC_R,    KC_T,      KC_Y,      KC_U,    KC_I,    KC_O,    KC_P,
    KC_A, KC_S,    KC_D,    KC_F,    KC_G,      KC_H,      KC_J,    KC_K,    KC_L,    _______,
    KC_LSFT, KC_X,    KC_C,    KC_V,    KC_B,      KC_N,      KC_M,    _______, _______,  _______, 
	 KC_Z,  _______,  _______,   _______,  _______, _______,   _______, _______, 
	_______, _______,  KC_NO, _______,   KC_NO, _______, _______, _______ 
  ),

  /* blank key layout template
   * .--------------------------------------------..--------------------------------------------.
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          |        |        |        |        ||        |        |        |        |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          |        |        |        |        ||        |        |        |        |
   *          '-----------------------------------''-----------------------------------'
   */
  [_UP] = LAYOUT(
    TO(_ML),   M_SWITCH_MAC_START, M_SWITCH_WIN_START, S(KC_INS), LCA(KC_TAB),   KC_DQT, KC_F9,  KC_F10,       KC_F11, KC_F12,
    KC_LSFT,  KC_ESC, KC_DEL, KC_DLR, KC_CIRC,         KC_PIPE,   KC_F5,  KC_F6, KC_F7, KC_F8,
    KC_INS,   KC_HASH,   KC_QUOT, KC_PERC, KC_AMPR,     KC_SCLN,   KC_F1,   KC_F2,   KC_F3,   KC_F4,
	    KC_GRV,  _______,  _______, _______,  _______,       _______, KC_PGUP, _______,
	    _______, _______, TO(_STD), _______,          _______,  KC_HOME, KC_PGDOWN, KC_END
  ),

  /* blank key layout template
   * .--------------------------------------------..--------------------------------------------.
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          |        |        |        |        ||        |        |        |        |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          |        |        |        |        ||        |        |        |        |
   *          '-----------------------------------''-----------------------------------'
   */

  [_ML] = LAYOUT(
    TO(_STD), KC_BTN1, M_DOUBLE_CLICK, M_CTRL_CLICK, M_TRIPLE_CLICK,   KC_NO, KC_NO,  KC_NO,       KC_NO, KC_NO,
    KC_NO,  KC_BTN2, KC_MS_WH_UP, M_SHIFT_CLICK, KC_BTN3,        KC_NO,   KC_NO,  KC_NO, KC_NO, KC_NO,
    KC_NO, KC_MS_WH_LEFT, KC_MS_WH_DOWN, KC_MS_WH_RIGHT,KC_NO,      KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,
	    KC_TRNS, _______,   _______,  _______,       _______, _______, _______, _______,
             _______, _______, TO(_STD), _______,          _______,  _______, _______, _______
  ),

  /* blank key layout template
   * .--------------------------------------------..--------------------------------------------.
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * |--------+--------+--------+--------+--------||--------+--------+--------+--------+--------|
   * |        |        |        |        |        ||        |        |        |        |        |
   * '--------+--------+--------+--------+--------||--------+--------+--------+--------+--------'
   *          |        |        |        |        ||        |        |        |        |
   *          |--------+--------+--------+--------||--------+--------+--------+--------|
   *          |        |        |        |        ||        |        |        |        |
   *          '-----------------------------------''-----------------------------------'
   */
   

};

LEADER_EXTERNS();

void matrix_scan_user(void) {
    uint8_t layer = biton32(layer_state);

    switch (layer) {
    	case _STD:
	    set_led_off;
	    break;
        case _DOWN: case _DOWN_SYMBOL: case _DOWN_ALPHA:
            set_led_red;
            break;
        case _UP:
            set_led_blue;
            break;
        case _ML:
            set_led_blue;
            break;
        default:
            break;
    }

    LEADER_DICTIONARY() {
      leading = false;
      leader_end();

      SEQ_ONE_KEY(KC_F) {
	SEND_STRING("QMK is awesome.");
      }
      SEQ_ONE_KEY(KC_A) {
	SEND_STRING(SS_LCTRL("a"));
      }
      SEQ_ONE_KEY(KC_X) {
	SEND_STRING(SS_LCTRL("x"));
      }
      SEQ_ONE_KEY(KC_C) {
	SEND_STRING(SS_LCTRL("c"));
      }
      SEQ_ONE_KEY(KC_V) {
	SEND_STRING(SS_LCTRL("v"));
      }
      SEQ_ONE_KEY(KC_D) {
	SEND_STRING(SS_TAP(X_DELETE));
      }
      SEQ_ONE_KEY(KC_Q) {
	SEND_STRING(SS_LCTRL(SS_LALT(SS_TAP(X_DELETE))));
      }
      SEQ_ONE_KEY(KC_W) {
	SEND_STRING(SS_LALT(SS_TAP(X_F4)));
      }
    }
};

